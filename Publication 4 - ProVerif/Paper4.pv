free chP1HE:channel.
free chP2HE:channel[private].
free chP3HE:channel.

type host.
type key.

free x1:bitstring[private]. (*Coordinate of P1*)
free x2:bitstring[private]. (*Coordinate of P2*)
free x3:bitstring[private]. (*Coordinate of P3*)

(*Symmetric Encryption*)
fun senc(bitstring,key):bitstring. (*symmetric key encryption of the bitstring with a key.*)
reduc forall x:bitstring, k:key; sdec(senc(x,k),k)=x. (*symmetric key decryption of the bitstring with a key.*)

(*Summation of three elements*)
fun sum(bitstring,bitstring,bitstring):bitstring.


(*Events*)

event P1begin(host,bitstring).
event P1finish(host,bitstring).

event P2begin(host,bitstring).
event P2finish(host,bitstring).

event P3begin(host,bitstring).
event P3finish(host,bitstring).

event HEbegin(host,bitstring).
event HEfinish(host,bitstring).

(* event Sbegin(host,bitstring).
event Sfinish(host,bitstring). *)

(*Reachability*)


query x:host,y:bitstring; event(P1begin(x,y)).
query x:host,y:bitstring; event(P1finish(x,y)).

query x:host,y:bitstring; event(P2begin(x,y)).
query x:host,y:bitstring; event(P2finish(x,y)).

query x:host,y:bitstring; event(P3begin(x,y)).
query x:host,y:bitstring; event(P3finish(x,y)).

query x:host,y:bitstring; event(HEbegin(x,y)). 
query x:host,y:bitstring; event(HEfinish(x,y)).

(* query x:host,y:bitstring; event(Sbegin(x,y)).
query x:host,y:bitstring; event(Sfinish(x,y)). *)


(*Secrecy*)
query attacker(x1).
query attacker(x2).
query attacker(x3).

(* query x:bitstring; event(ProtocolEnd(x)) && attacker(x).
query x:bitstring,t:host; event(ProtocolEnd(x)) ==> event(UEsentC(x)). *)


let processP1(P1:host,x1:bitstring)=

    event P1begin(P1,x1);
    out(chP1HE,x1);
        
    in(chP1HE,(M:bitstring));

    event P1finish(P1,M).

let processP2(P2:host,x2:bitstring)=

    event P2begin(P2,x2);
    out(chP2HE,x2);

    in(chP2HE,(M:bitstring));

    event P2finish(P2,M).

let processP3(P3:host,x3:bitstring,k:key)=

    event P3begin(P3,x3);
    out(chP3HE,senc(x3,k));

    in(chP3HE,(M:bitstring));

    event P3finish(P3,M).

let processHE(HE:host,k:key)=

    in(chP1HE,x1_rec:bitstring);
    in(chP2HE,x2_rec:bitstring);
    in(chP3HE,Ex3_rec:bitstring);
    let x3_rec=sdec(Ex3_rec,k) in
    event HEbegin(HE,(x1_rec,x2_rec,x3_rec));

    let M=sum(x1_rec,x2_rec,x3_rec) in

    event HEfinish(HE,M);
    out(chP1HE,(M));
    out(chP2HE,(M));
    out(chP3HE,(M)).
   



process
    new P1:host;
    new P2:host;
    new P3:host;
    new HE:host;
   
    new k:key;

 !(   !processP1(P1,x1) | !processP2(P2,x2) | !processP3(P3,x3,k) |
        !processHE(HE,k)
 
    (* | (event compromise(S); out(internet,sk_S) ) *)

 
 
 )   