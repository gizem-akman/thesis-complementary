free chUEMNOA:channel[private].
free chUEMNOB:channel[private].
free chMNOAAF:channel.
free chMNOBAF:channel[private].
free internet:channel.

type key.
type coins.
type host.

(*identifiers*)
free SUPI_A: bitstring[private]. (*The private identifier of UE for MNO A.*)
free SUPI_B: bitstring[private]. (*The private identifier of UE for MNO B.*)
free ID_AF: bitstring. (*The public identifier of Application Function (AF).*)
free ID_MNO_A: bitstring. (*The public identifier of Mobile Network Operator A(MNO A).*)
free ID_MNO_B: bitstring. (*The public identifier of Mobile Network Operator B(MNO B).*)

(*keys*)
free K_A: key[private]. (*The shared private key between UE and MNO A.*)
free K_B: key[private]. (*The shared private key between UE and MNO A.*)

(*nonces*)
free nAKID: bitstring[private]. (*The nonce related to A_KID*)
free nKAKMA: bitstring[private]. (*The nonce related to K_AKMA*)
free nKAF: bitstring[private]. (*The nonce related to K_AF*)

(*functions*)
fun fATID(bitstring,key):bitstring. (*A-TID derivation. Inputs: K, SUPI*)
fun fAKID(bitstring):bitstring. (*A-KID derivation. Inputs: (A-TID,ID_MNO)*) 
reduc forall m:bitstring,n:bitstring; fIDHN(fAKID((m,n)))=n. (*ID_MNO extraction. Input: A-KID*)
fun fKAKMA(bitstring,key):key. (*K_AKMA derivation. Inputs: K, SUPI*)
fun fKAF(bitstring,key):key. (*K_AF derivation. Inputs: K_AKMA, ID_AF*)
fun fexp(key):bitstring. (*expiration time definition for K_AF. Input: K_AF*)
fun sencbit(bitstring,bitstring):bitstring. (*symmetric key encryption of the bitstring with another bitstrings.*)
reduc forall x:bitstring, y:bitstring; sdecbit(sencbit(x,y),y)=x. (*symmetric key decryption of the bitstring with another bitstrings.*)
fun senckey(bitstring,key):bitstring. (*symmetric key encryption of the bitstring with a key.*)
reduc forall x:bitstring, y:key; sdeckey(senckey(x,y),y)=x. (*symmetric key decryption of the bitstring with a key.*)

(*database*)
table database(bitstring,bitstring,key). (*The database of MNO, where MNO keeps A_KID, SUPI, and K_AKMA of the user*)

(*events*)
(*1*)
    event UEhasKAKMA(key).
    event UEhasAKID(bitstring).
    event MNOBhasKAKMA(key).
    event MNOBhasAKID(bitstring).
    event indatabase(bitstring,bitstring,key).
(*2*)
    event UEhasKAF(key).
(*3*)
    event UEbegin(bitstring).
(*4*)
    event MNOAbegin(bitstring).
(*5*)
    event AFbegin(bitstring).
    event AFsendReqMNO(bitstring,bitstring).
(*6*)
    event MNOBbegin(bitstring).
    event yesKAKMA(key). (*MNO finds SUPI and K_AKMA related to the A_KID*)
    event MNOBhasKAF(key). 
    event MNOBfinish(key).
(*7*)
    event AFhasKAF(key).
    event AFfinish(key).
(*8*)
    event MNOAfinish(bitstring).
(*9*)
    event UEfinish(key).

(*Reachability*)

(*1*)
query a:key; event(UEhasKAKMA(a)).
query a:bitstring; event(UEhasAKID(a)).
query a:key; event(MNOBhasKAKMA(a)).
query a:bitstring; event(MNOBhasAKID(a)).
query a:bitstring,b:bitstring,c:key; event(indatabase(a,b,c)).
(*2*)
query a:key; event(UEhasKAF(a)).
(*3*)
query a:bitstring; event(UEbegin(a)).
(*4*)
query a:bitstring; event(MNOAbegin(a)).
(*5*)
query a:bitstring; event(AFbegin(a)).
query a:bitstring,b:bitstring; event(AFsendReqMNO(a,b)).
(*6*)
query a:bitstring; event(MNOBbegin(a)).
query a:key; event(yesKAKMA(a)). (*MNO finds SUPI and K_AKMA related to the A_KID*)
query a:key; event(MNOBhasKAF(a)). 
query a:key; event(MNOBfinish(a)).
(*7*)
query a:key; event(AFhasKAF(a)).
query a:key; event(AFfinish(a)).
(*8*)
query a:bitstring; event(MNOAfinish(a)).
(*9*)
query a:key; event(UEfinish(a)).


(*Secrecy*)
query attacker(K_A). 
query attacker(K_B). 
query attacker(SUPI_A). 
query attacker(SUPI_B). 
query attacker(nAKID). 
query attacker(nKAKMA). 
query attacker(nKAF). 

(*Strong Secrecy*)
noninterf SUPI_A. 
noninterf K_A. 
noninterf SUPI_B. 
noninterf K_B. 

(*Weak Secrecy*)
weaksecret SUPI_A.
weaksecret K_A.
weaksecret SUPI_B.
weaksecret K_B.


(* Aliveness*)
(* UE-->AF*)                                          
query a:key,b:key,c:bitstring,d:bitstring;
event(UEfinish(a)) ==>  event(AFsendReqMNO(c,d)) || event(AFfinish(b)).
(* AF-->UE*)                                          
query a:key,b:bitstring;
event(AFfinish(a)) ==> event(UEbegin(b)).
(* MNOB-->AF*)                                          
query a:key,b:key,d:bitstring,e:bitstring;
event(MNOBfinish(a)) ==> event(AFfinish(b)) || event(AFsendReqMNO(d,e)).
(* AF-->MNOB*)                                          
query a:key,b:key;
event(AFfinish(a)) ==> event(MNOBfinish(b)). 

(*Weak Agreement*)

(*UE->AF*)
query a:key,b:key; event(UEfinish(a)) ==> event(AFfinish(b)).
(*AF->UE*)
query a:key,b:bitstring; event(AFfinish(a)) ==> event(UEbegin(b)).
(*MNOB->AF*)
query a:key,c:bitstring,d:bitstring; event(MNOBfinish(a)) ==> event(AFsendReqMNO(c,d)).
(*AF->MNOB*)
query a:key,b:key; event(AFfinish(a)) ==> event(MNOBfinish(b)).


(*Non-injective / Injective*)

(*AF->MNO on K_AF*)
query a:key; event(AFfinish(a)) ==> event(MNOBfinish(a)).
query a:key; inj-event(AFfinish(a)) ==> inj-event(MNOBfinish(a)).
(*MNO->AF on K_AF*)
query a:key; event(MNOBfinish(a)) ==> event(AFfinish(a)).
query a:key; inj-event(MNOBfinish(a)) ==> inj-event(AFfinish(a)).



(*The processes in the Protocol*)

(*UE*)
let processUE(UE:host,SUPI_A:bitstring,K_A:key,ID_MNO_A:bitstring,SUPI_B:bitstring,K_B:key,ID_MNO_B:bitstring,ID_AF:bitstring)= 
(*Step 1*)
    let K_AKMA_B=fKAKMA(SUPI_B,K_B) in
    event UEhasKAKMA(K_AKMA_B);
    let ATID=fATID(SUPI_B,K_B) in
    let A_KID_B=fAKID((ATID,ID_MNO_B)) in
    event UEhasAKID(A_KID_B);
(*Step 2*)
    let K_AF_B=fKAF(ID_AF,K_AKMA_B) in
    event UEhasKAF(K_AF_B);
    let expKAF=fexp(K_AF_B) in
(*Step 3*)
    event UEbegin(A_KID_B);
    out(chUEMNOA,(A_KID_B,ID_AF));

(*Step 9*)
    in(chUEMNOA,M:bitstring);
    (* let message=sdeckey(M,K_AF_B) in *)
    event UEfinish(K_AF_B);
    out(internet,sencbit(nAKID,A_KID_B));
    out(internet,senckey(nKAKMA,K_AKMA_B));     
    out(internet,senckey(nKAF,K_AF_B)).
     
     
let processMNOA(MNO_A:host,SUPI_A:bitstring,K_A:key,ID_MNO_A:bitstring)=
(*Step 4*)
    in(chUEMNOA,(A_KID:bitstring,ID_AF_rec:bitstring));
    event MNOAbegin(A_KID);
    out(chMNOAAF,A_KID);

(*Step 8*)
    in(chUEMNOA,(M:bitstring));
    event MNOAfinish(M);
    out(chUEMNOA,M).


let processMNOB(MNO_B:host,SUPI_B:bitstring,K_B:key,ID_MNO_B:bitstring)=
(*Step 1*)
    let K_AKMA_UE=fKAKMA(SUPI_B,K_B) in
    event MNOBhasKAKMA(K_AKMA_UE);
    let A_KID_UE=fAKID((fATID(SUPI_B,K_B),ID_MNO_B)) in
    event MNOBhasAKID(A_KID_UE);
    event indatabase(A_KID_UE,SUPI_B,K_AKMA_UE);
    insert database(A_KID_UE,SUPI_B,K_AKMA_UE);

(*Step 6*)
    in(chMNOBAF,(AKID:bitstring,ID_AFrec:bitstring));
    event MNOBbegin(AKID);
    get database(=AKID,SUPIrec:bitstring,K_AKMArec:key) in 
    if K_AKMArec=K_AKMA_UE&&SUPIrec=SUPI_B then event yesKAKMA(K_AKMArec);
    let K_AF_UE=fKAF(ID_AFrec,K_AKMArec) in
    event MNOBhasKAF(K_AF_UE); 
    let expKAF=fexp(K_AF_UE) in

    event MNOBfinish(K_AF_UE);
    out(chMNOBAF,(SUPI_B,expKAF,K_AF_UE)).


let processAF(AF:host,ID_AF:bitstring)=
(*Step 5*)
    in(chMNOAAF,(AKID:bitstring));
    event AFbegin(AKID);

    let idHN=fIDHN(AKID) in
    event AFsendReqMNO(AKID,ID_AF);
    out(chMNOBAF,(AKID,ID_AF));

(*Step 7*)
    in(chMNOBAF,(SUPIrec:bitstring,expKAF:bitstring,K_AF:key));
    event AFhasKAF(K_AF);
    new messageSuccess: bitstring;
    let M=senckey(messageSuccess,K_AF) in
    event AFfinish(K_AF);
    out(chMNOAAF,M).


process

    new UE: host;
    new MNO_A: host;
    new MNO_B: host;
    new AF:host;


 !(   !processUE(UE,SUPI_A,K_A,ID_MNO_A,SUPI_B,K_B,ID_MNO_B,ID_AF) | 
        !processMNOA(MNO_A,SUPI_A,K_A,ID_MNO_A) | 
        !processMNOB(MNO_B,SUPI_B,K_B,ID_MNO_B) | 
        !processAF(AF,ID_AF)
        | phase 1; out(internet,( K_A, K_B, SUPI_A, SUPI_B, ID_AF))

 )   