free chUEMEC:channel.
free chMECAF:channel.
free internet:channel.

type key.
type coins.
type host.

free K_MEC:key[private].
free K_AF:key[private].
free id_UE:bitstring[private].

(*AEAD*)
fun internal_senc(bitstring,key,coins):bitstring.
reduc forall m:bitstring,k:key,r:coins; sdec(internal_senc(m,k,r),k)=m.
letfun senc(m:bitstring,k:key)=new r:coins; internal_senc(m,k,r).

event UEsentC(bitstring).
event MECreceiveC(bitstring).
event MECsendEID(bitstring).
event AFreceiveEID(bitstring).
event ProtocolEnd(bitstring).
event compromise(host).

(*Reachability*)
query x:bitstring; event(UEsentC(x)).
query x:bitstring; event(MECreceiveC(x)).
query x:bitstring; event(MECsendEID(x)).
query x:bitstring; event(AFreceiveEID(x)).
query x:bitstring; event(ProtocolEnd(x)).
query x:host; event(compromise(x)).

query attacker(id_UE).

query x:bitstring; event(ProtocolEnd(x)) && attacker(x).
query x:bitstring,t:host; event(ProtocolEnd(x)) ==> event(UEsentC(x)).


let processUE(UE:host,id_UE:bitstring,K_MEC:key,K_AF:key)=

    let eID=senc(id_UE,K_AF) in
    let C=senc(eID,K_MEC) in

    event UEsentC(id_UE);
    out(chUEMEC,C).

let processMEC(MEC:host,K_MEC:key)=

    in(chUEMEC,C:bitstring);
    event MECreceiveC(C);

    let eID=sdec(C,K_MEC) in

    event MECsendEID(eID);
    out(chMECAF,eID).

let processAF(AF:host,K_AF:key)=

    in(chMECAF,eID:bitstring);
    event AFreceiveEID(eID);

    let id_UE=sdec(eID,K_AF) in
    event ProtocolEnd(id_UE).


process
    new UE:host;
    new MEC:host;
    new AF:host;

 !(   !processUE(UE,id_UE,K_MEC,K_AF) | !processMEC(MEC,K_MEC) | !processAF(AF,K_AF)
 
    | (event compromise(MEC); out(internet,K_MEC) )

 
 
 )   